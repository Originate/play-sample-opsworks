{"name":"play2","description":"Installs/Configures a Play2 application","long_description":"# play2 cookbook\n\nThis cookbook is a working prototype allowing the deployment of applications written with \nthe [Play framework](http://www.playframework.com/) on Amazon's [Opsworks](http://aws.amazon.com/opsworks/).\n\n# Requirements\n\nThis cookbook depends on two other cookbooks:\n- [java](http://community.opscode.com/cookbooks/java)\n- [artifact](http://community.opscode.com/cookbooks/artifact)\n\nUnfortunately, Opsworks doesn't know how to find these, so our approach is to use [Berkshelf]() to install all \nthe dependencies into an app-specific repository, and use that as the custom cookbook repository in Opsworks.\n\nExample:\n```bash\ngit clone git://github.com/Originate/cookbooks.git originate-cookbooks\nmkdir /tmp/cookbooks\n# berks install will remove everything, including .git, from the target directory\nberks install -b originate-cookbooks/play2/Berksfile -p /tmp/cookbooks\nmv /tmp/cookbooks/* <custom-app-repo>\n```\n\n# Usage\n1. Create a new Stack, add your `custom-app-repo` as the source of custom cookbooks\n2. Create a new custom layer:\n  - Add `play2::setup` to the setup lifecyle event recipes\n  - Add `play2::deploy` to the deploy lifecyle event recipes\n  - Start a new instance\n3. Add your play application to the stack, and deploy it\n\nOptionally:\n- If your application is not at the root of your repository, you can add custom JSON to the stack to let\n  this cookbook know:\n\n  ```json\n  {\n    \"deploy\": {\n      \"<app-name>\": {\n        \"scm\": {\n          \"app_dir\": \"<path/to/app/in/repo>\"\n         }\n      }\n    }\n  }\n  ```\n- If you want to customize some of the cookbook's attributes, you can add custom JSON to the stack:\n\n  ```json\n  {\n    \"play2\": {\n      \"version\": \"2.1.3\",\n      \"conf\": {\n        \"application\": {\n          \"langs\": \"en\"\n        },\n        \"logger\": {\n          \"root\": \"ERROR\",\n          \"play\": \"INFO\",\n          \"application\": \"DEBUG\"\n        }\n      }\n    }\n  }\n  ```\n\nThat's it, you should be good to go.\n\n# Attributes\n\n## Framework installation\n|Key|Type|Description|Default|\n|---|----|-----------|-------|\n|`version`|`String`|The Play version to install|`2.2.0`|\n|`url`|`String`|Base url to download the play distribution|`http://downloads.typesafe.com/play`|\n\n## Application command line options\n|Key|Type|Description|Default|\n|---|----|-----------|-------|\n|`http_port`|`Integer`|`-Dhttp.port=...`|`nil`|\n|`https_port`|`Integer`|`-Dhttps.port=...`|`nil`|\n|`app_conf_file`|`String`|`-Dconfig.file=...`|`nil`|\n|`log_conf_file`|`String`|`-Dlogger.file=...`|`nil`|\n|`options`|`String`|Additional options that you'd like to pass to play on startup<br> (ie. `-Xms2048M -Xmx6144M ...`)|`nil`|\nThese options are only added if the attribute is defined.\n\n## Application configuration\n|Key|Type|Description|Default|\n|---|----|-----------|-------|\n|`conf`|`JSON`|A JSON reprensentation of `application.conf`|`nil`|\n\nEnables specifying the entire application configuration from Opsworks JSON. This overwrites `conf/application.conf` \nif defined. A sample configuration can be seen in the `Vagrantfile`.\n","maintainer":"Maxime Bury","maintainer_email":"maxime.bury@originate.com","license":"All rights reserved","platforms":{},"dependencies":{"java":"~> 1.14.0","artifact":"~> 1.10.3"},"recommendations":{},"suggestions":{},"conflicting":{},"providing":{},"replacing":{},"attributes":{},"groupings":{},"recipes":{},"version":"0.1.0"}